package com.theauramc.hub.commands;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.bukkit.Bukkit;
import org.bukkit.Color;
import org.bukkit.FireworkEffect;
import org.bukkit.FireworkEffect.Type;
import org.bukkit.Location;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Firework;
import org.bukkit.inventory.meta.FireworkMeta;

//import com.theauramc.AuraRanks.API.Ranks;
import com.theauramc.hub.Hub;

public class PartymodeCommand implements CommandExecutor {
	Hub plugin;
	
	public PartymodeCommand(Hub passedPlugin){
		this.plugin = passedPlugin;
	}

		boolean showStarted = false;

		public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
			//if(Ranks.getRankFromPower(rankPower == 9)){
			if(label.equalsIgnoreCase("partymode")){
			if (!showStarted)
				startShow();
			else
				sender.sendMessage("A show is already going on!");
			}
			return false;
		}

		int i = 0;

		public void startShow() { 
			i = 0;
			showStarted = true;
			final List<Location> positions = new ArrayList<Location>();
            positions.add(new Location(Bukkit.getWorld("world"), -30.5, 17, 31.5));
            positions.add(new Location(Bukkit.getWorld("world"), -42.5, 17, 4.5));
            positions.add(new Location(Bukkit.getWorld("world"), -42.5, 17, -3.5));
            positions.add(new Location(Bukkit.getWorld("world"), -30.5, 17, 30.5));
            positions.add(new Location(Bukkit.getWorld("world"), -3.5, 17, -42.5));
            positions.add(new Location(Bukkit.getWorld("world"), 4.5, 17, -42.5));
            positions.add(new Location(Bukkit.getWorld("world"), 31.5, 17, -30.5));
            positions.add(new Location(Bukkit.getWorld("world"), 43.5, 17, -3.5));
            positions.add(new Location(Bukkit.getWorld("world"), 43.5, 17, 4.5));
            positions.add(new Location(Bukkit.getWorld("world"), 31.5, 17, 31.5));
            positions.add(new Location(Bukkit.getWorld("world"), 4.5, 17, 43.5));
            positions.add(new Location(Bukkit.getWorld("world"), -3.5, 17, 43.5));
            //ring 2
            positions.add(new Location(Bukkit.getWorld("world"), -28.5, 17, 4.5));
            positions.add(new Location(Bukkit.getWorld("world"), -28.5, 17, -3.5));
            positions.add(new Location(Bukkit.getWorld("world"), -3.5, 17, -28.5));
            positions.add(new Location(Bukkit.getWorld("world"), 4.5, 17, -28.5));
            positions.add(new Location(Bukkit.getWorld("world"), 29.5, 17, -3.5));
            positions.add(new Location(Bukkit.getWorld("world"), 29.5, 17, 4.5));
            positions.add(new Location(Bukkit.getWorld("world"), 4.5, 17, 29.5));
            positions.add(new Location(Bukkit.getWorld("world"), -3.5, 17, 29.5));
            //ring 3
            positions.add(new Location(Bukkit.getWorld("world"), 0.5, 17, 19.5));
            positions.add(new Location(Bukkit.getWorld("world"), -18.5, 17, 0.5));
            positions.add(new Location(Bukkit.getWorld("world"), 0.5, 17, -18.5));
            positions.add(new Location(Bukkit.getWorld("world"), 19.5, 17, 0.5));
            //SG sign
            positions.add(new Location(Bukkit.getWorld("world"), -49.5, 36, 15.5));
            positions.add(new Location(Bukkit.getWorld("world"), -49.5, 36, -14.5));
            //Slaplings sign
            positions.add(new Location(Bukkit.getWorld("world"), 17.5, 31, 50.5));
            positions.add(new Location(Bukkit.getWorld("world"), -16.5, 31, 50.5));
            //Conquest sign
            positions.add(new Location(Bukkit.getWorld("world"), 49.5, 31, -15.5));
            positions.add(new Location(Bukkit.getWorld("world"), 49.5, 31, 16.5));
            //Dome
            positions.add(new Location(Bukkit.getWorld("world"), -6.5, 31, -15.5));
            positions.add(new Location(Bukkit.getWorld("world"), 7.5, 31, -15.5));
            positions.add(new Location(Bukkit.getWorld("world"), 12.5, 31, -11.5));
            positions.add(new Location(Bukkit.getWorld("world"), 16.5, 31, -6.5));
            positions.add(new Location(Bukkit.getWorld("world"), 16.5, 31, 7.5));
            positions.add(new Location(Bukkit.getWorld("world"), 12.5, 31, 12.5));
            positions.add(new Location(Bukkit.getWorld("world"), 7.5, 31, 16.5));
            positions.add(new Location(Bukkit.getWorld("world"), -6.5, 31, 16.5));
            positions.add(new Location(Bukkit.getWorld("world"), 11.5, 31, 12.5));
            positions.add(new Location(Bukkit.getWorld("world"), -15.5, 31, 7.5));
            positions.add(new Location(Bukkit.getWorld("world"), -15.5, 31, -6.5));
            positions.add(new Location(Bukkit.getWorld("world"), -11.5, 31, -11.5));

			Bukkit.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, new Runnable() {
						public void run() {
							if (i < 60) {
								for (Location l : positions) {
									if (new Random().nextBoolean())
										spawnRandomFirework(l);
								}
								i++;
							}

							if (i == 60)
								showStarted = false;
						}
					}, 0l, 10l);
		}

		private void spawnRandomFirework(Location l) {
			Firework fw = (Firework) l.getWorld().spawnEntity(l,
					EntityType.FIREWORK);
			FireworkMeta fwm = fw.getFireworkMeta();

			Random r = new Random();

			int rt = r.nextInt(4) + 1;
			Type type = Type.BALL;
			if (rt == 1)
				type = Type.BALL;
			if (rt == 2)
				type = Type.BALL_LARGE;
			if (rt == 3)
				type = Type.BURST;
			if (rt == 4)
				type = Type.CREEPER;
			if (rt == 5)
				type = Type.STAR;

			int r1i = r.nextInt(17) + 1;
			int r2i = r.nextInt(17) + 1;
			Color c1 = getColor(r1i);
			Color c2 = getColor(r2i);

			FireworkEffect effect = FireworkEffect.builder().flicker(r.nextBoolean()).withColor(c1).withFade(c2).with(type).trail(r.nextBoolean()).build();

			fwm.addEffect(effect);

			int rp = r.nextInt(2) + 1;
			fwm.setPower(rp);

			fw.setFireworkMeta(fwm);
		}

		private Color getColor(int i) {
			Color c = null;
			if (i == 1) {
				c = Color.AQUA;
			}
			if (i == 2) {
				c = Color.BLACK;
			}
			if (i == 3) {
				c = Color.BLUE;
			}
			if (i == 4) {
				c = Color.FUCHSIA;
			}
			if (i == 5) {
				c = Color.GRAY;
			}
			if (i == 6) {
				c = Color.GREEN;
			}
			if (i == 7) {
				c = Color.LIME;
			}
			if (i == 8) {
				c = Color.MAROON;
			}
			if (i == 9) {
				c = Color.NAVY;
			}
			if (i == 10) {
				c = Color.OLIVE;
			}
			if (i == 11) {
				c = Color.ORANGE;
			}
			if (i == 12) {
				c = Color.PURPLE;
			}
			if (i == 13) {
				c = Color.RED;
			}
			if (i == 14) {
				c = Color.SILVER;
			}
			if (i == 15) {
				c = Color.TEAL;
			}
			if (i == 16) {
				c = Color.WHITE;
			}
			if (i == 17) {
				c = Color.YELLOW;
			}

			return c;
		}
	}
